import pandas as pd
import pandas_ta as ta
import yfinance as yf
import numpy as np
from frame import Backtest 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


class Strategy:
    def __init__(self, data, **kwargs):
        self.data = data
        self.short_window = 10
        self.long_window = 25
        self.volume_window = kwargs.get('volume_window', 1) 
        self.contract_size = kwargs.get('contract_size', 0.001)
        self.multiplier  = kwargs.get('multiplier', 10)
        self.maintenance_margin_rate = kwargs.get('maintenance_margin_rate', 0.05)

    def add_reference_data(self, backtest, ticker):
        backtest.df['Maintenance_Margin'] = 0
        backtest.df['Initial_margin'] = 0
        backtest.df['force_close_out'] = 0
        backtest.df['EMA_5'] = backtest.df[ticker].ewm(span=5, adjust=False).mean()
        backtest.df['EMA_21'] = backtest.df[ticker].ewm(span=21, adjust=False).mean()

        def compute_rsi(series, period=14):
            delta = series.diff()
            gain = delta.clip(lower=0)
            loss = -delta.clip(upper=0)
            avg_gain = gain.rolling(window=period, min_periods=period).mean()
            avg_loss = loss.rolling(window=period, min_periods=period).mean()
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            return rsi

        backtest.df['RSI'] = compute_rsi(backtest.df[ticker], period=14)

        #EMA
        short_ema = backtest.df[ticker].ewm(span=12, adjust=False).mean()
        long_ema = backtest.df[ticker].ewm(span=26, adjust=False).mean()


        #MACD
        backtest.df['MACD'] = short_ema - long_ema
        backtest.df['Signal_Line'] = backtest.df['MACD'].ewm(span=9, adjust=False).mean()
        backtest.df['MACD_diff'] = backtest.df['MACD'] - backtest.df['Signal_Line']

        #Bollinger Band
        backtest.df['Middle_Band'] = backtest.df[ticker].rolling(window=20).mean()
        std = backtest.df[ticker].rolling(window=20).std()
        backtest.df['Upper_Band'] = backtest.df['Middle_Band'] + (2 * std)
        backtest.df['Lower_Band'] = backtest.df['Middle_Band'] - (2 * std)



        backtest.df['test'] = 0

        #Drop NaN
        backtest.df.dropna(inplace=True)

        

        #Drop NaN
        backtest.df.dropna(inplace=True)

    def next(self, ticker, backtest, index):
        current_index = backtest.df.index.get_loc(index)
        if current_index < 2:  #ignore first index 
            return
        
        last_index = backtest.df.index[current_index - 1]
        last2_index = backtest.df.index[current_index - 2]
        
        # periouvs data
        backtest.df.loc[index, 'Maintenance_Margin'] = backtest.df.loc[last_index, 'Maintenance_Margin']
        backtest.df.loc[index, ticker + '_holding_position'] = backtest.df.loc[last_index, ticker + '_holding_position']
        backtest.df.loc[index, ticker + '_average_cost'] = backtest.df.loc[last_index, ticker + '_average_cost']
        backtest.df.loc[index, 'Cash'] = backtest.df.loc[last_index, 'Cash']
        backtest.df.loc[index, 'Total_equity'] = backtest.df.loc[last_index, 'Total_equity']
        backtest.df.loc[index, 'Initial_margin'] = backtest.df.loc[last_index, 'Initial_margin']
        
        # current market data
        price = backtest.df.loc[last_index, ticker]
        open_price = backtest.df.loc[index, 'Open']
        cash = backtest.df.loc[index, 'Cash']
        contract_cost = open_price * self.contract_size 
        initial_margin = contract_cost/self.multiplier




        # position related 

        buy_qty =int(((cash/2)-1)/initial_margin)


        

        holding_position = backtest.df.loc[index, ticker + '_holding_position']
        
        # TA indicator
        ema21 = backtest.df.loc[last_index, 'EMA_21']
        ema5 = backtest.df.loc[last_index, 'EMA_5']
        rsi = backtest.df.loc[last_index, 'RSI']

        #Trading condition
        long_condition = backtest.df.loc[index, 'Cash'] > initial_margin*(buy_qty+holding_position)
        long_condition2 = price < ema21 and price < ema5 and rsi < 25
        short_condition = backtest.df.loc[index, ticker + '_holding_position'] >= 0
        short_condition2 = price > ema21 and price > ema5 and rsi > 75

        force_close_condition = holding_position != 0 and backtest.df.loc[index, 'Total_equity'] <  price*self.contract_size*holding_position*self.maintenance_margin_rate

        stop_profit_condition = holding_position != 0 and backtest.df.loc[last_index, ticker + '_average_cost'] * (1 + 6/100 )<= price
        stop_loss_condition = holding_position != 0 and backtest.df.loc[last_index, ticker + '_average_cost'] * (1 - 3/100 )>= price


        if long_condition2 and long_condition:
            if backtest.df.loc[last_index, ticker + '_holding_position']==0:
                new_avg_cost = (backtest.df.loc[last_index, ticker + '_average_cost'] * holding_position + open_price * buy_qty) / (holding_position + buy_qty) if (holding_position + buy_qty) != 0 else open_price
                backtest.df.loc[index, ticker + '_average_cost'] = new_avg_cost
                backtest.df.loc[index, ticker + '_holding_position'] += buy_qty
                backtest.df.loc[index, ticker + '_action_signal'] = 1
            elif backtest.df.loc[last_index, ticker + '_holding_position'] < 0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = 1



        if short_condition2:
            if backtest.df.loc[last_index, ticker + '_holding_position']==0:
                new_avg_cost = (backtest.df.loc[last_index, ticker + '_average_cost'] * holding_position + open_price * buy_qty) / (holding_position + buy_qty) if (holding_position + buy_qty) != 0 else open_price
                backtest.df.loc[index, ticker + '_average_cost'] = new_avg_cost
                backtest.df.loc[index, ticker + '_holding_position'] -= buy_qty
                backtest.df.loc[index, ticker + '_action_signal'] = -1
            elif backtest.df.loc[last_index, ticker + '_holding_position'] > 0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = -1


        if stop_profit_condition or stop_loss_condition:
            if backtest.df.loc[index, ticker + '_holding_position']>0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = -1
            if backtest.df.loc[index, ticker + '_holding_position']<0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = 1
        
        if force_close_condition :
            if backtest.df.loc[index, ticker + '_holding_position']>0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = -1
                backtest.df[index, ticker +'force_close_out'] = -1

            elif backtest.df.loc[index, ticker + '_holding_position']<0:
                backtest.df.loc[index, ticker + '_holding_position'] = 0
                backtest.df.loc[index, ticker + '_action_signal'] = 1
                backtest.df[index, ticker +'force_close_out'] = 1


            

        #==========================================================================================================
        #Equity & cash moving
        #==========================================================================================================

        #Position moving
        position_moving =   backtest.df.loc[index, ticker + '_holding_position'] - backtest.df.loc[last_index, ticker + '_holding_position']
        position_moving_value = position_moving * contract_cost
        
        #Maintenance Margin
        backtest.df['Maintenance_Margin'] = (backtest.df.loc[index, ticker + '_holding_position']* self.contract_size * backtest.df.loc[index, ticker + '_average_cost'] *self.maintenance_margin_rate ) 

        #Margin per unit
        if backtest.df.loc[index, ticker + '_holding_position'] !=0 or backtest.df.loc[last_index, ticker + '_holding_position']!=0:
            initial_margin_per_unit =backtest.df.loc[last_index, 'Initial_margin'] / abs(backtest.df.loc[last_index, ticker + '_holding_position'])

        #PnL 
        reaslied_pnl = 0
        unrealised_pnl = 0
        # Long unrealised PnL   
        if backtest.df.loc[index, ticker + '_holding_position'] > 0:
            unrealised_pnl = backtest.df.loc[index, ticker + '_holding_position'] * (backtest.df.loc[index, ticker] - backtest.df.loc[index, ticker + '_average_cost'])* self.contract_size
        # Short unrealised PnL
        elif backtest.df.loc[index, ticker + '_holding_position'] < 0:
            unrealised_pnl = backtest.df.loc[index, ticker + '_holding_position'] * (backtest.df.loc[index, ticker + '_average_cost'] - backtest.df.loc[index, ticker])* self.contract_size

        # Long realised PnL   
        if backtest.df.loc[index, ticker + '_holding_position'] == 0 and backtest.df.loc[last_index, ticker + '_holding_position'] > 0:
            reaslied_pnl = position_moving * (open_price - backtest.df.loc[index, ticker + '_average_cost']) * self.contract_size
        # Short realised PnL   
        elif backtest.df.loc[index, ticker + '_holding_position'] == 0 and backtest.df.loc[last_index, ticker + '_holding_position'] < 0:
            reaslied_pnl = position_moving * (backtest.df.loc[index, ticker + '_average_cost']-open_price) * self.contract_size

        #Cash and Initial margin move when postion moving
        if abs(backtest.df.loc[index, ticker + '_holding_position']) > abs(backtest.df.loc[last_index, ticker + '_holding_position']):
            backtest.df.loc[index, 'Initial_margin'] += abs(position_moving_value/ self.multiplier)
            backtest.df.loc[index, 'Cash'] -= backtest.df.loc[index, 'Initial_margin'] 
        elif abs(backtest.df.loc[index, ticker + '_holding_position']) < abs(backtest.df.loc[last_index, ticker + '_holding_position']):
            backtest.df.loc[index, 'Initial_margin'] -= initial_margin_per_unit*abs(position_moving)
            backtest.df.loc[index, 'Cash'] += (initial_margin_per_unit*abs(position_moving) + reaslied_pnl)
        
        #Equity
        backtest.df.loc[index, 'Total_equity'] = backtest.df.loc[index, 'Cash'] + unrealised_pnl

ticker = 'BTC'
start_day = "2024-12-01"
end_day = "2025-03-26"
stock_df = pd.read_csv('btc_1hour_data.csv')
stock_df.set_index('Date', inplace=True)  



#set up best_sharpe
best_sharpe = float('-inf')

ratios = np.arange(20, 40, 5)
     
for i in ratios:
            
        backtest = Backtest(initial_cash=1000)
            
        backtest.add_data(ticker, stock_df)
            
        backtest.add_strategy(Strategy, volume_window=i)
            
        backtest.run()
            
        backtest.calculate_return()
            
        sharpe = backtest.analyse_tool.sharpe_ratio()
        max_drawdown = backtest.analyse_tool.maximum_drawdown()
        
        if sharpe:
            print(f'Stock:{ticker}')
            print(f'Volume window:{i}')
            print(f'SR:{sharpe}')
            print(f'MMD:{max_drawdown}')
            
        test_df = backtest.df
        test_df.to_csv('test2.csv')
            
        if sharpe >= best_sharpe:
            best_stock = ticker
            best_sharpe = sharpe
            best_ratio = i
            best_mmd = max_drawdown
            optimized_df = backtest.df


print(best_stock, best_ratio, best_sharpe, best_mmd)

optimized_df.to_csv('backtest_result.csv')


optimized_df.index = pd.to_datetime(optimized_df.index, format="%Y-%m-%d %H:%M:%S", errors='coerce')


print("Index type after conversion:", optimized_df.index.dtype)


if optimized_df.index.isna().any():
    print("Warning: Some index values could not be converted to datetime. Check the data:")
    print(optimized_df.index[optimized_df.index.isna()])


fig, (ax_price, ax_rsi) = plt.subplots(2, 1, figsize=(14, 10), sharex=True)
plt.subplots_adjust(hspace=0.1)

# Price (main)
ax_price.plot(optimized_df.index, optimized_df[ticker], label=f'{ticker} Price', color='orange')
ax_price.plot(optimized_df.index, optimized_df['EMA_21'], label='21 day EMA', color='blue', linestyle='--')
ax_price.plot(optimized_df.index, optimized_df['EMA_5'], label='5 day EMA', color='green', linestyle='--')

# Buy Sell Singal
buy_signals = np.where(optimized_df[f'{ticker}_action_signal'] == 1, optimized_df[ticker], np.nan)
sell_signals = np.where(optimized_df[f'{ticker}_action_signal'] == -1, optimized_df[ticker], np.nan)
ax_price.scatter(optimized_df.index[~np.isnan(buy_signals)], buy_signals[~np.isnan(buy_signals)],
                 marker='^', s=75, color='g', label='Buy')
ax_price.scatter(optimized_df.index[~np.isnan(sell_signals)], sell_signals[~np.isnan(sell_signals)],
                 marker='v', s=75, color='r', label='Sell')
ax_price.set_title(f"{ticker} Backtest")
ax_price.legend(loc='upper left')

# RSI 
ax_rsi.plot(optimized_df.index, optimized_df['RSI'], label='RSI', color='purple')
ax_rsi.axhline(70, color='red', linestyle='--', label='Overbought')
ax_rsi.axhline(30, color='green', linestyle='--', label='Oversold')
ax_rsi.set_ylabel('RSI')
ax_rsi.legend(loc='upper left')


ax_rsi.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d %H:%M:%S"))
fig.autofmt_xdate()

vline_ax1 = ax_price.axvline(x=optimized_df.index[0], color='k', linestyle='--', alpha=0.5, visible=False)
vline_ax2 = ax_rsi.axvline(x=optimized_df.index[0], color='k', linestyle='--', alpha=0.5, visible=False)


hline_trending_price = ax_price.axhline(y=optimized_df[ticker].iloc[0],
                                        color='magenta', linestyle='-.', alpha=0.7, visible=False)

hline_trending_rsi = ax_rsi.axhline(y=optimized_df['RSI'].iloc[0],
                                    color='magenta', linestyle='-.', alpha=0.7, visible=False)

date_annotation = ax_price.text(0.98, 0.90, "", transform=ax_price.transAxes,
                             bbox=dict(boxstyle="round", facecolor="wheat", alpha=0.5))

def on_mouse_move(event):
    # 判斷滑鼠是否在其中一個子圖，且 event.xdata 有效
    if event.inaxes in [ax_price, ax_rsi] and event.xdata is not None:
        xdata = event.xdata
        cur_date = mdates.num2date(xdata)
        date_str = cur_date.strftime("%Y-%m-%d")

        # 轉換 optimized_df 的 index 日期型態為數值型（以便作比較）
        dt_index = pd.to_datetime(optimized_df.index)
        dates_num = mdates.date2num(dt_index.to_pydatetime())
        
        # 找出離 xdata 最近的資料點索引
        idx = (np.abs(dates_num - xdata)).argmin()


        stock_open = optimized_df.iloc[idx]['Open']
        current_price = optimized_df.iloc[idx][ticker]
        current_rsi = optimized_df.iloc[idx]['RSI']


        date_annotation.set_text(
            f"Date: {date_str}\nOpen: {stock_open:.2f}\nPrice: {current_price:.2f}\nRSI: {current_rsi:.2f}"
        )

        for vline in [vline_ax1, vline_ax2]:
            vline.set_xdata([xdata, xdata])
            vline.set_visible(True)


            hline_trending_price.set_ydata([current_price, current_price])
            hline_trending_price.set_visible(True)
            hline_trending_rsi.set_ydata([current_rsi, current_rsi])
            hline_trending_rsi.set_visible(True)




        fig.canvas.draw_idle()
    else:

        for vline in [vline_ax1, vline_ax2]:
            vline.set_visible(False)
        hline_trending_price.set_visible(False)
        hline_trending_rsi.set_visible(False)
        date_annotation.set_text("")
        fig.canvas.draw_idle()

fig.canvas.mpl_connect('motion_notify_event', on_mouse_move)
plt.show()
