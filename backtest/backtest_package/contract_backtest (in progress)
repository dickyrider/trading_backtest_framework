import pandas as pd
import pandas_ta as ta
import yfinance as yf
import numpy as np
from frame import Backtest 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


class Strategy:
    def __init__(self, data, **kwargs):
        self.data = data
        self.short_window = 10
        self.long_window = 25
        self.volume_window = kwargs.get('volume_window', 1) 
        self.contract_size = kwargs.get('contract_size', 0.001)
        self.multiplier  = kwargs.get('multiplier', 10)

    def add_reference_data(self, backtest, ticker):
        backtest.df['EMA_20'] = backtest.df[ticker].ewm(span=20, adjust=False).mean()
        backtest.df['EMA_100'] = backtest.df[ticker].ewm(span=100, adjust=False).mean()

        #Drop NaN
        backtest.df.dropna(inplace=True)

    def next(self, ticker, backtest, index):
        current_index = backtest.df.index.get_loc(index)
        if current_index < 2:  #ignore first index 
            return
        
        last_index = backtest.df.index[current_index - 1]
        last2_index = backtest.df.index[current_index - 2]
        
        # periouvs data
        backtest.df.loc[index, ticker + '_holding_position'] = backtest.df.loc[last_index, ticker + '_holding_position']
        backtest.df.loc[index, ticker + '_average_cost'] = backtest.df.loc[last_index, ticker + '_average_cost']
        backtest.df.loc[index, 'Cash'] = backtest.df.loc[last_index, 'Cash']
        backtest.df.loc[index, 'Total_equity'] = backtest.df.loc[last_index, 'Total_equity']
        
        # current market data
        price = backtest.df.loc[index, ticker]
        open_price = backtest.df.loc[index, 'Open']
        cash = backtest.df.loc[index, 'Cash']
        contract_cost = open_price * self.contract_size 
        # position related 
        buy_qty = int(cash / contract_cost)
        holding_position = backtest.df.loc[index, ticker + '_holding_position']
        
        # TA indicator
        ema20 = backtest.df.loc[last_index, 'EMA_20']
        ema100 = backtest.df.loc[last_index, 'EMA_100']



        if price > ema20:

            new_avg_cost = (backtest.df.loc[last_index, ticker + '_average_cost'] * holding_position + open_price * buy_qty) / (holding_position + buy_qty) if (holding_position + buy_qty) != 0 else open_price
            backtest.df.loc[index, ticker + '_average_cost'] = new_avg_cost
            backtest.df.loc[index, ticker + '_holding_position'] = holding_position + buy_qty
            backtest.df.loc[index, ticker + '_action_signal'] = 1

        if price < ema20:

            backtest.df.loc[index, ticker + '_holding_position'] = 0
            backtest.df.loc[index, ticker + '_action_signal'] = -1



        #Equity & cash moving
        position_moving =   backtest.df.loc[index, ticker + '_holding_position'] - backtest.df.loc[last_index, ticker + '_holding_position']
        position_moving_value = position_moving * open_price * self.contract_size * self.multiplier
        backtest.df.loc[index, 'Cash'] = backtest.df.loc[last_index, 'Cash'] - position_moving_value
        backtest.df.loc[index, 'Total_equity'] = backtest.df.loc[index, 'Cash'] + backtest.df.loc[index, ticker] * backtest.df.loc[index, ticker + '_holding_position'] * self.contract_size * self.multiplier


ticker = 'BTC-USD'
start_day = "2024-10-01"
end_day = "2025-03-26"
stock_df = yf.download(ticker, start=start_day, end=end_day)
stock_df.columns = [col[0] for col in stock_df.columns]

#ADX
stock_df.ta.adx(length=14, append=True)

#Stochastic
stock_df.ta.stoch(append=True)

# ADX (default 14 days)
stock_df.ta.adx(length=14, append=True)  
# Columns: ADX_14, DMP_14, DMN_14

# MACD 
stock_df.ta.macd(fast=6, slow=19, signal=9, append=True)
# Columns：MACD_6_19_9, MACDs_6_19_9, MACDh_6_19_9

# OBV：
stock_df.ta.obv(append=True)
# Columns：OBV

# Bollinger Bands (default 20 days)
stock_df.ta.bbands(length=20, std=2, append=True)
# Columns：BBL_20_2.0, BBM_20_2.0, BBU_20_2.0, BBB_20_2.0, BBS_20_2.0

# RSI (14 days)
stock_df.ta.rsi(length=14, append=True)  
# Columns：RSI_14

# Stochastic (default 14,3,3)
stock_df.ta.stoch(append=True)
# Columns：STOCHk_14_3_3, STOCHd_14_3_3

#set up best_sharpe
best_sharpe = float('-inf')

ratios = np.arange(20, 40, 5)
     
for i in ratios:
            
        backtest = Backtest(initial_cash=1000)
            
        backtest.add_data(ticker, stock_df)
            
        backtest.add_strategy(Strategy, volume_window=i)
            
        backtest.run()
            
        backtest.calculate_return()
            
        sharpe = backtest.analyse_tool.sharpe_ratio()
        max_drawdown = backtest.analyse_tool.maximum_drawdown()
        
        if sharpe:
            print(f'Stock:{ticker}')
            print(f'Volume window:{i}')
            print(f'SR:{sharpe}')
            print(f'MMD:{max_drawdown}')
            
        test_df = backtest.df
        test_df.to_csv('test2.csv')
            
        if sharpe > best_sharpe:
            best_stock = ticker
            best_sharpe = sharpe
            best_ratio = i
            best_mmd = max_drawdown
            optimized_df = backtest.df


print(best_stock, best_ratio, best_sharpe, best_mmd)

optimized_df.to_csv('backtest_result.csv')


fig, (ax_price, ax_rsi, ax_macd) = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
plt.subplots_adjust(hspace=0.1)

# Price (main)
ax_price.plot(optimized_df.index, optimized_df[ticker], label=f'{ticker} Price', color='orange')
ax_price.plot(optimized_df.index, optimized_df['BBM_20_2.0'], label='BBM_20_2.0', color='blue', linestyle='--')
ax_price.plot(optimized_df.index, optimized_df['BBU_20_2.0'], label='BBU_20_2.0', color='green', linestyle='--')
ax_price.plot(optimized_df.index, optimized_df['BBL_20_2.0'], label='BBL_20_2.0', color='red', linestyle='--')
# Buy Sell Singal
buy_signals = np.where(optimized_df[f'{ticker}_action_signal'] == 1, optimized_df[ticker], np.nan)
sell_signals = np.where(optimized_df[f'{ticker}_action_signal'] == -1, optimized_df[ticker], np.nan)
ax_price.scatter(optimized_df.index[~np.isnan(buy_signals)], buy_signals[~np.isnan(buy_signals)],
                 marker='^', s=75, color='g', label='Buy')
ax_price.scatter(optimized_df.index[~np.isnan(sell_signals)], sell_signals[~np.isnan(sell_signals)],
                 marker='v', s=75, color='r', label='Sell')
ax_price.set_title(f"{ticker} Backtest")
ax_price.legend(loc='upper left')

# RSI 
ax_rsi.plot(optimized_df.index, optimized_df['RSI_14'], label='RSI_14', color='purple')
ax_rsi.axhline(70, color='red', linestyle='--', label='Overbought')
ax_rsi.axhline(30, color='green', linestyle='--', label='Oversold')
ax_rsi.set_ylabel('RSI_14')
ax_rsi.legend(loc='upper left')

# MACD 
ax_macd.plot(optimized_df.index, optimized_df['MACD_6_19_9'], label='MACD_6_19_9', color='blue')
ax_macd.plot(optimized_df.index, optimized_df['MACDs_6_19_9'], label='MACDs_6_19_9 Line', color='red')

ax_macd.set_ylabel('MACD_6_19_9')
ax_macd.legend(loc='upper left')

ax_macd.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
fig.autofmt_xdate()

vline_ax1 = ax_price.axvline(x=optimized_df.index[0], color='k', linestyle='--', alpha=0.5, visible=False)
vline_ax2 = ax_rsi.axvline(x=optimized_df.index[0], color='k', linestyle='--', alpha=0.5, visible=False)
vline_ax3 = ax_macd.axvline(x=optimized_df.index[0], color='k', linestyle='--', alpha=0.5, visible=False)

date_annotation = ax_price.text(0.98, 0.90, "", transform=ax_price.transAxes,
                             bbox=dict(boxstyle="round", facecolor="wheat", alpha=0.5))

def on_mouse_move(event):

    if event.inaxes in [ax_price, ax_rsi, ax_macd] and event.xdata is not None:
        xdata = event.xdata
        cur_date = mdates.num2date(xdata) 
        date_str = cur_date.strftime("%Y-%m-%d")


        dt_index = pd.to_datetime(optimized_df.index)
        dates_num = mdates.date2num(dt_index.to_pydatetime())
        
        idx = (np.abs(dates_num - xdata)).argmin()
        nearest_date = optimized_df.index[idx]
        stock_open = optimized_df.iloc[idx]['Open']



        date_annotation.set_text(f"Date: {date_str}\nOpen: {stock_open:.2f}"
                                 )


        for vline in [vline_ax1, vline_ax2, vline_ax3]:
            vline.set_xdata([xdata, xdata])
            vline.set_visible(True)
        fig.canvas.draw_idle()
    else:

        for vline in [vline_ax1, vline_ax2, vline_ax3]:
            vline.set_visible(False)
        date_annotation.set_text("")
        fig.canvas.draw_idle()

fig.canvas.mpl_connect('motion_notify_event', on_mouse_move)

plt.show()
